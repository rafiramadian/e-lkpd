// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  student
  teacher
}

enum UserStatus {
  active
  inactive
}

enum ContentType {
  text
  image
  video
  file
}

enum InquiryStage {
  question
  exploration
  experiment
  conclusion
}

enum QuestionType {
  multiple_choice
  short_answer
  essay
  code
}

enum TestType {
  pre_test
  post_test
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  fullName  String     @map("full_name")
  role      UserRole   @default(student)
  status    UserStatus @default(active)
  classId   String?    @map("class_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  // Relations
  class     Class?     @relation(fields: [classId], references: [id], onDelete: SetNull)
  classes   Class[]    @relation("TeacherClasses")
  materials Material[] @relation("TeacherMaterials")
  studentAssignments StudentAssignment[]
  studentTests StudentTest[]
  discussions Discussion[]
  feedback  Feedback[]
  progress  Progress[]

  @@map("users")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  teacherId   String   @map("teacher_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  teacher    User     @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)
  students   User[]
  materials  Material[]

  @@map("classes")
}

model Material {
  id          String   @id @default(cuid())
  title       String
  description String?
  classId     String   @map("class_id")
  teacherId   String   @map("teacher_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher     User     @relation("TeacherMaterials", fields: [teacherId], references: [id], onDelete: Cascade)
  content     MaterialContent[]
  inquiryStages InquiryStageModel[]
  assignments Assignment[]
  tests       Test[]
  discussions Discussion[]
  progress    Progress[]

  @@map("materials")
}

model MaterialContent {
  id         String      @id @default(cuid())
  materialId String      @map("material_id")
  type       ContentType
  content    String
  orderIndex Int         @map("order_index")
  createdAt  DateTime    @default(now()) @map("created_at")

  // Relations
  material   Material    @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@map("material_content")
}

model InquiryStageModel {
  id          String       @id @default(cuid())
  materialId  String       @map("material_id")
  stage       InquiryStage
  title       String
  description String?
  content     String
  orderIndex  Int          @map("order_index")
  createdAt   DateTime     @default(now()) @map("created_at")

  // Relations
  material    Material     @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@map("inquiry_stages")
}

model Assignment {
  id          String    @id @default(cuid())
  materialId  String    @map("material_id")
  title       String
  description String?
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  questions   Question[]
  studentAssignments StudentAssignment[]

  @@map("assignments")
}

model Question {
  id            String       @id @default(cuid())
  assignmentId  String       @map("assignment_id")
  type          QuestionType
  question      String
  options       Json?        // For multiple choice questions
  correctAnswer String?      @map("correct_answer")
  points        Int          @default(1)
  orderIndex    Int          @map("order_index")
  createdAt     DateTime     @default(now()) @map("created_at")

  // Relations
  assignment    Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  answers       Answer[]

  @@map("questions")
}

model StudentAssignment {
  id           String    @id @default(cuid())
  assignmentId String    @map("assignment_id")
  studentId    String    @map("student_id")
  score        Decimal?  @db.Decimal(5, 2)
  submittedAt  DateTime? @map("submitted_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers      Answer[]
  feedback     Feedback[]

  @@unique([assignmentId, studentId])
  @@map("student_assignments")
}

model Answer {
  id                 String   @id @default(cuid())
  studentAssignmentId String  @map("student_assignment_id")
  questionId         String   @map("question_id")
  answer             String
  isCorrect          Boolean? @map("is_correct")
  pointsEarned       Decimal? @map("points_earned") @db.Decimal(5, 2)
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  studentAssignment  StudentAssignment @relation(fields: [studentAssignmentId], references: [id], onDelete: Cascade)
  question           Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Test {
  id          String    @id @default(cuid())
  materialId  String    @map("material_id")
  title       String
  description String?
  type        TestType
  timeLimit   Int?      @map("time_limit") // in minutes
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  questions   TestQuestion[]
  studentTests StudentTest[]

  @@map("tests")
}

model TestQuestion {
  id            String       @id @default(cuid())
  testId        String       @map("test_id")
  type          QuestionType
  question      String
  options       Json?
  correctAnswer String?      @map("correct_answer")
  points        Int          @default(1)
  orderIndex    Int          @map("order_index")
  createdAt     DateTime     @default(now()) @map("created_at")

  // Relations
  test          Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers       TestAnswer[]

  @@map("test_questions")
}

model StudentTest {
  id          String   @id @default(cuid())
  testId      String   @map("test_id")
  studentId   String   @map("student_id")
  score       Decimal  @db.Decimal(5, 2)
  completedAt DateTime @default(now()) @map("completed_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers     TestAnswer[]

  @@unique([testId, studentId])
  @@map("student_tests")
}

model TestAnswer {
  id             String   @id @default(cuid())
  studentTestId  String   @map("student_test_id")
  testQuestionId String   @map("test_question_id")
  answer         String
  isCorrect      Boolean? @map("is_correct")
  pointsEarned   Decimal? @map("points_earned") @db.Decimal(5, 2)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  studentTest    StudentTest   @relation(fields: [studentTestId], references: [id], onDelete: Cascade)
  testQuestion   TestQuestion  @relation(fields: [testQuestionId], references: [id], onDelete: Cascade)

  @@map("test_answers")
}

model Discussion {
  id         String    @id @default(cuid())
  materialId String    @map("material_id")
  title      String
  content    String
  authorId   String    @map("author_id")
  parentId   String?   @map("parent_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  material   Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent     Discussion? @relation("DiscussionReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Discussion[] @relation("DiscussionReplies")

  @@map("discussions")
}

model Progress {
  id                 String   @id @default(cuid())
  studentId          String   @map("student_id")
  materialId         String   @map("material_id")
  assignmentId       String?  @map("assignment_id")
  testId             String?  @map("test_id")
  progressPercentage Decimal  @default(0) @map("progress_percentage") @db.Decimal(5, 2)
  completedAt        DateTime? @map("completed_at")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  student            User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  material           Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@unique([studentId, materialId, assignmentId, testId])
  @@map("progress")
}

model Feedback {
  id                 String   @id @default(cuid())
  studentAssignmentId String  @map("student_assignment_id")
  teacherId          String   @map("teacher_id")
  content            String
  score              Decimal? @db.Decimal(5, 2)
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  studentAssignment  StudentAssignment @relation(fields: [studentAssignmentId], references: [id], onDelete: Cascade)
  teacher            User              @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("feedback")
}
